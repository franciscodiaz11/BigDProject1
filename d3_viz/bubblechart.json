{"_id":"uFdmArsAMR2G2biwS","name":"Bubble Chart","description":null,"type":"custom","privacy":"private","mode":"normal","resources":null,"html":"<!-- IMPORTANT GUIDELINES\n1. div #canvas wraps this html block. \n2. div #canvas-svg is used for svg rendering. It can be placed anywhere here.\n3. Do not define an html page here, i.e. including html, head, body tags. -->\n\n<div id=\"canvas-svg\"><\\/div>","stylesheet":"/* stylesheet for your custom graph */","javascript":"/*--- IMPORTANT GUIDELINES ---\r\n1. Use div #canvas-svg for svg rendering\r\n    var svg = d3.select(\"#canvas-svg\");\r\n2. 'data' variable contains JSON data from Data tab\r\n    Do NOT overwrite this variable \r\n3. To define customizable properties, use capitalized variable names,\r\n    and define them in Properties tab ---*/\r\n\r\nvar tree = {name: \"bubble\", children: []};\r\nfor (var i = 0; i < data.length; i++) {\r\n  tree.children.push({name: data[i][config.name], children: [\r\n      {name: data[i][config.name], size: data[i][config.size]}\r\n    ]});\r\n}\r\n\r\nvar root = tree;\r\n\r\nvar diameter = config.width,\r\n    format = d3.format(\",d\"),\r\n    color = d3.scale.category20();\r\n\r\nvar bubble = d3.layout.pack()\r\n    .sort(null)\r\n    .size([diameter, diameter])\r\n    .padding(1.5);\r\n\r\nvar svg = d3.select(\"#canvas-svg\").append(\"svg\")\r\n    .attr(\"width\", diameter)\r\n    .attr(\"height\", diameter)\r\n    .attr(\"class\", \"bubble\");\r\n\r\nvar node = svg.selectAll(\".node\")\r\n  .data(bubble.nodes(classes(root))\r\n  .filter(function(d) { return !d.children; }))\r\n.enter().append(\"g\")\r\n  .attr(\"class\", \"node\")\r\n  .attr(\"transform\", function(d) { return \"translate(\" + d.x + \",\" + d.y + \")\"; });\r\n\r\nnode.append(\"circle\")\r\n  .attr(\"r\", function(d) { return d.r; })\r\n  .style(\"fill\", function(d) { return color(d.packageName); });\r\n\r\nnode.append(\"text\")\r\n  .attr(\"dy\", \"0em\")\r\n  .style(\"text-anchor\", \"middle\")\r\n  .text(function(d) { return d.className.substring(0, d.r / 3); });\r\n\r\nnode.append(\"text\")\r\n  .attr(\"dy\", \"1.3em\")\r\n  .style(\"font-size\", \"12px\")\r\n  .style(\"text-anchor\", \"middle\")\r\n  .text(function(d) { return format(d.value).substring(0, d.r / 3); });\r\n\r\n// Returns a flattened hierarchy containing all leaf nodes under the root.\r\nfunction classes(root) {\r\n  var classes = [];\r\n\r\n  function recurse(name, node) {\r\n    if (node.children) node.children.forEach(function(child) { recurse(node.name, child); });\r\n    else classes.push({packageName: name, className: node.name, value: node.size});\r\n  }\r\n\r\n  recurse(null, root);\r\n  return {children: classes};\r\n}\r\n\r\nd3.select(self.frameElement).style(\"height\", diameter + \"px\");\r\n","readme":"<!-- Markdown Documentation !-->","dataText":"name,size\r\nDIARRHEA,\t10018\r\nEBOLA,\t5461\r\nFLU,\t45751\r\nHEADACHE,\t255\r\nMEASLES,\t3730\r\nTRUMP,\t794\r\nZIKA,\t2317","properties":[{"label":"Width","name":"width","value":800,"type":"number"},{"label":"Height","name":"height","value":800,"type":"number"},{"label":"Name","name":"name","value":"name","type":"data_column"},{"label":"Size","name":"size","value":"size","type":"data_column"}]}
